package ebct

const trackingnumbers = DefaultEndPoint + Version + "packages/tracking-numbers"

type TrackingNumbers struct {
	RequestId            *string  `json:"requestId,omitempty"`            // Request number generated by calling the Tracking Number Range Request method. This value is returned in the "requestId" key of this method.
	RequestDate          *string  `json:"requestDate,omitempty"`          // Date and time the request was created. It is in the pattern "YYYY-MM-DDThh:mm:ss.sss".
	DistributionModality *int     `json:"distributionModality,omitempty"` // Type of distribution in the Brazilian territory, as informed in the requisition. It must return one of the values: 33162 - PACKET STANDARD 33170 - PACKET EXPRESS 33197 - PACKET MINI
	InitialRangeCode     *string  `json:"initialRangeCode,omitempty"`     // First tracking number in the sequence.
	FinalRangeCode       *string  `json:"finalRangeCode,omitempty"`       // Last tracking number in the sequence.
	RequestedQuantity    *int     `json:"requestedQuantity,omitempty"`    // Quantity of tracking numbers requested.
	TotalUsed            *int     `json:"totalUsed,omitempty"`            // Quantity of tracking numbers, in this range, already used.
	TotalUnused          *int     `json:"totalUnused,omitempty"`          // Quantity of tracking numbers, in this range, not yet used. It is important to note that new requests must be made only when this value is close to or equal to the "requestedQuantity" field, which indicates that the requested numbers are being properly used.
	Links                []string `json:"links,omitempty"`                // May contain a link to specific requests for queries
}

func (n TrackingNumbers) Error() string {
	panic("implement me")
}

type TrackingNumbersInput struct {
	DistributionModality *int `json:"distributionModality,omitempty"` // Type of distribution in the Brazilian territory, as informed in the requisition. It must return one of the values: 33162 - PACKET STANDARD 33170 - PACKET EXPRESS 33197 - PACKET MINI
	Quantity             *int `json:"quantity,omitempty"`
}

type TrackingNumbersReturn struct {
	TrackingNumbers []string `json:"trackingNumbers,omitempty"` // List of tracking numbers generated
}

func (n TrackingNumbersReturn) Error() string {
	panic("implement me")
}

func (c *Client) GetTrackingNumbers() (*TrackingNumbers, error) {

	newTrackingNumbers := &TrackingNumbers{}
	err := c.Get(trackingnumbers, nil, nil, newTrackingNumbers)
	return newTrackingNumbers, err
}

func (c *Client) PostTrackingNumbers(createtracks *TrackingNumbersInput) (*TrackingNumbersReturn, error) {

	newTrackingNumbersReturn := &TrackingNumbersReturn{}
	err := c.Post(trackingnumbers, createtracks, nil, newTrackingNumbersReturn)
	return newTrackingNumbersReturn, err
}

type PackList struct {
	PackageList []PackageTrack `json:"packageList,omitempty"`
}

type PackageTrack struct {
	TrackingNumber             *string  `json:"trackingNumber,omitempty"`
	SenderName                 *string  `json:"senderName,omitempty"`
	SenderAddress              *string  `json:"senderAddress,omitempty"`
	SenderAddressNumber        *string  `json:"senderAddressNumber,omitempty"`
	SenderAddressComplement    *string  `json:"senderAddressComplement,omitempty"`
	SenderZipCode              *string  `json:"senderZipCode,omitempty"`
	SenderCityName             *string  `json:"senderCityName,omitempty"`
	SenderState                *string  `json:"senderState,omitempty"`
	SenderCountryCode          *string  `json:"senderCountryCode,omitempty"`
	SenderEmail                *string  `json:"senderEmail,omitempty"`
	SenderWebsite              *string  `json:"senderWebsite,omitempty"`
	RecipientDocumentType      *string  `json:"recipientDocumentType,omitempty"`
	RecipientDocumentNumber    *string  `json:"recipientDocumentNumber,omitempty"`
	RecipientName              *string  `json:"recipientName,omitempty"`
	RecipientAddress           *string  `json:"recipientAddress,omitempty"`
	RecipientAddressNumber     *string  `json:"recipientAddressNumber,omitempty"`
	RecipientZipCode           *string  `json:"recipientZipCode,omitempty"`
	RecipientAddressComplement *string  `json:"recipientAddressComplement,omitempty"`
	RecipientEmail             *string  `json:"recipientEmail,omitempty"`
	RecipientPhoneNumber       *string  `json:"recipientPhoneNumber,omitempty"`
	Currency                   *string  `json:"currency,omitempty"`
	TotalWeight                *float64 `json:"totalWeight,omitempty"`
	DistributionModality       *int     `json:"distributionModality,omitempty"`
	PackagingLength            *float64 `json:"packagingLength,omitempty"`
	PackagingWidth             *float64 `json:"packagingWidth,omitempty"`
	PackagingHeight            *float64 `json:"packagingHeight,omitempty"`
	TaxPaymentMethod           *string  `json:"taxPaymentMethod,omitempty"`
	FreightPaidValue           *float64 `json:"freightPaidValue,omitempty"`
	InsurancePaidValue         *int     `json:"insurancePaidValue,omitempty"`
	Items                      []Item   `json:"items,omitempty"`
}

func (c *Client) PutTrackingNumbers(createtracks *PackageTrack, tracknumber string) (*PackageTrack, error) {

	newTrackingNumbersReturn := &PackageTrack{}
	err := c.Put(packagesRequest+"/"+tracknumber, createtracks, nil, newTrackingNumbersReturn)
	return newTrackingNumbersReturn, err
}
